---
on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:
env:
  XDG_CACHE_HOME: ${{ github.workspace }}/.cache/xdg
  POETRY_CACHE_DIR: ${{ github.workspace }}/.cache/poetry
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Cache xdg
        uses: actions/cache@v2
        with:
          path: ${{ env.XDG_CACHE_HOME }}
          key: xdg-v1-${{ hashFiles('**/Makefile') }}
          restore-keys: |
            xdg-v1-
      - name: Cache poetry
        uses: actions/cache@v2
        with:
          path: ${{ env.POETRY_CACHE_DIR }}
          key: poetry-v1-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-v1-
      - name: Cache python venv
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.venv
          key: pyvenv-v1-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pyvenv-v1-
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: paths-filter
        with:
          base: main
          list-files: shell
          filters: |
            images:
              - 'images/**'
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v7
      - id: image-names
        shell: bash
        run: |
          image_names="$(printf "%s\n" ${{ steps.paths-filter.outputs.images_files }} | sed -E -e 's,^.*images/([^/]+)/.*$,\1,g' | sort | uniq | tr '\n' ' ')"
          declare -p image_names
          echo "::set-output name=image_names::${image_names}"
      - id: toolchain
        shell: bash
        run: |
          poetry install
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      - id: build-and-publish
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export IMAGE_NAMES="${{ steps.image-names.outputs.image_names }}"
          docker buildx create --use
          export docker_image_build_args="--load --cache-from type=gha --cache-to type=gha,mode=max"
          make VERBOSE=all validate build
          # make VERBOSE=all test # TODO: FIXME
          echo "${{ github.token }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
          make push-images oci_remote_ref_prefixes=ghcr.io/${{ github.repository }}/
